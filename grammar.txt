<program>           ::= START <stmt_list> 

<stmt_list>         ::= <stmt> <stmt_list> | STOP

<stmt>              ::= <declaration> | <assignment> | <cond> | <repeat_when>

<declaration>       ::= <type> identifier `?`
<type>              ::= 1b | 2b | 4b | 8b

<assignment>        ::= identifier `=` <expr> `?`

<cond>              ::= when <bool_expr> `{` <codeblock> or `{` <codeblock>
                    | when <bool_expr> `{` <codeblock>
<repeat_when>          ::= repeat_when <bool_expr> ‘{‘ <codeblock>
<codeblock>         ::= <stmt> <codeblock> | `}` 

<bool_expr>         ::= `(` <expr> <comparison_op> <expr> `)`
<comparison_op>     ::= `<` | `<=’ | `>’ | `>=’ | `==’ | `!=` 

### Enforce rule of non BODMAS
<expr>              ::= <div>
<div>               ::= <mul> `/` <div> | <mul>
<mul>               ::= <sum> `*` <mul> |     <sum>
<sum>               ::= <sub> `+` <sum> | <sub>
<sub>               ::= <mod> `-` <sub> | <mod>
<mod>               ::= <factor> `%` <mod> | <factor>
<factor>            ::= `(` <expr> `)` | <value>

<value>             ::= LITERAL_INT_1b 
                    | LITERAL_INT_2b 
                    | LITERAL_INT_4b 
                    | LITERAL_INT_8b
                    | identifier